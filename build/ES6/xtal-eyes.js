import{XtallatX}from"./node_modules/xtal-latx/xtal-latx.js";import{define}from"./node_modules/xtal-latx/define.js";const params="params";export class XtalEyes extends XtallatX(HTMLElement){constructor(){super(...arguments);this._conn=!1;this._previousValues={}}static get is(){return"xtal-eyes"}static get observedAttributes(){return super.observedAttributes.concat([params])}get params(){return this._params}set params(nv){this._params=nv;this.onPropsChange()}attributeChangedCallback(nm,ov,nv){super.attributeChangedCallback(nm,ov,nv);switch(nm){case params:this._params=JSON.parse(nv);break;}this.onPropsChange()}connectedCallback(){this._upgradeProperties([params]);this._conn=!0;this.onPropsChange()}onPropsChange(){if(!this._params||!this._conn)return;const obj=this.getObjToObs();if(obj){const config={attributes:!0,attributeFilter:this._params};this._attributeObserver=new MutationObserver(mutationRecords=>{const values={};this._params.forEach(param=>{values[param]=obj.getAttribute(param)});this.de("params",{mutationRecords:mutationRecords,values:values,source:obj})});this._attributeObserver.observe(obj,config)}}getObjToObs(){let parent=this;while(parent=parent.parentNode){if(11===parent.nodeType){return parent.host}else if(-1<parent.tagName.indexOf("-")){return parent}else if("HTML"===parent.tagName){this.watchLocation();return null}}}watchLocation(){window.addEventListener("popstate",()=>{this.notifySrchParams()});const oPS=window.history.pushState,bPS=oPS.bind(window.history);history.pushState=(newState,title,URL)=>{bPS(newState,title,URL);this.notifySrchParams()};const oRS=window.history.replaceState,bRS=oRS.bind(window.history);history.replaceState=(newState,title,URL)=>{bRS(newState,title,URL);this.notifySrchParams()};this.notifySrchParams()}notifySrchParams(){const searchParams=new URLSearchParams(location.search);let changedVal=!1;this._params.forEach(param=>{const searchParm=searchParams.get(param);if(!changedVal&&searchParm!==this._previousValues[param]){changedVal=!0;this._previousValues[param]=searchParm}});if(changedVal){this.de("params",{values:this._previousValues})}}disconnectedCallback(){if(this._attributeObserver)this._attributeObserver.disconnect()}}define(XtalEyes);